definitions:
  models.Address:
    properties:
      address:
        type: string
      apartment:
        type: string
      city:
        type: string
      district:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.EmailSignIn:
    description: Model for user registration
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.UserSignIn:
    description: Model for user registration
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
info:
  contact: {}
  description: This is a sample server for a demo application
  title: Demo API
  version: "1.0"
paths:
  /Address/add-address:
    post:
      consumes:
      - application/json
      description: Add or update address for the user
      parameters:
      - description: Address Details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.Address'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Add or Update Address
      tags:
      - Address
  /Address/get-address:
    get:
      consumes:
      - application/json
      description: Get address for the user
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Address
      tags:
      - Address
  /Auth/email-check:
    post:
      consumes:
      - application/json
      description: Check if the user email exists in the database
      parameters:
      - description: User Email Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.EmailSignIn'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      summary: Check User Email
      tags:
      - Auth
  /Auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Login Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserSignIn'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      summary: User Login
      tags:
      - Auth
  /Auth/sign-up:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Name
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Image upload failed
        "500":
          description: Internal Server Error
      summary: Sign up a new user
      tags:
      - Auth
  /Cart/add-to-cart{productID}:
    post:
      consumes:
      - application/json
      description: Adds a product to the authenticated user's cart
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      - description: Quantity to add
        in: query
        minimum: 1
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Insufficient product quantity
        "401":
          description: Unauthorized - Token missing or invalid
        "404":
          description: Product not found
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Add product to user's cart
      tags:
      - Cart
  /Cart/get-cart-items:
    get:
      consumes:
      - application/json
      description: Retrieves all items in the authenticated user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized - Token missing or invalid
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Get all items in user's cart
      tags:
      - Cart
  /Cart/remove-to-cart{productID}:
    delete:
      consumes:
      - application/json
      description: Removes a product from the authenticated user's cart
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized - Token missing or invalid
        "404":
          description: Product not found in cart
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Remove product from user's cart
      tags:
      - Cart
  /Product/get-products:
    get:
      consumes:
      - application/json
      description: Retrieve all products from the database
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Products
  /Product/get-related-products:
    get:
      consumes:
      - application/json
      description: Retrieve related products from the database by matching name or
        description
      parameters:
      - description: Product name to search for related items
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get related products by name
      tags:
      - Products
  /Profile/get-profile:
    get:
      consumes:
      - application/json
      description: Get user profile data
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user profile data
      tags:
      - profile
  /WishList/add-wishList{productID}:
    post:
      consumes:
      - application/json
      description: Adds a product to the authenticated user's wishlist
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized - Token missing or invalid
        "404":
          description: Product not found
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Add product to user's wishlist
      tags:
      - wishlist
  /WishList/get-wishList:
    get:
      consumes:
      - application/json
      description: Fetches the authenticated user's wishlist
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized - Token missing or invalid
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Get user's wishlist
      tags:
      - wishlist
  /WishList/remove-wishList{productID}:
    delete:
      consumes:
      - application/json
      description: Removes a product from the authenticated user's wishlist
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product successfully removed from wishlist
        "401":
          description: Unauthorized - Token missing or invalid
        "404":
          description: Product not found in wishlist
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Remove product from user's wishlist
      tags:
      - wishlist
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
